package {{package}};

{{^jdk8-no-delegate}}
{{#imports}}import {{import}};
{{/imports}}

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
{{/jdk8-no-delegate}}
import org.springframework.stereotype.Controller;
{{^jdk8-no-delegate}}
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
{{#useOptional}}
import java.util.Optional;
{{/useOptional}}
{{#async}}
import java.util.concurrent.Callable;
{{/async}}{{/jdk8-no-delegate}}
{{#useBeanValidation}}
import javax.validation.Valid;
{{/useBeanValidation}}
import com.teamrocket.naasp.service.exception.BadRequestException;
import com.teamrocket.naasp.service.exception.NAASPException;
{{>generatedAnnotation}}
@Controller
{{#operations}}
public abstract class {{classname}}Controller implements {{classname}} {
    {{^jdk8-no-delegate}}{{#operation}}
    public {{#async}}Callable<{{/async}}ResponseEntity{{#async}}>{{/async}} {{{baseName}}}{{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
        {{/hasMore}}{{/allParams}}) {
        try {
            {{#queryParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "query"); {{/required}}{{/queryParams}}{{#pathParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "path"); {{/required}}{{/pathParams}}{{#headerParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "header"); {{/required}}{{/headerParams}}{{#bodyParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "body"); {{/required}}{{/bodyParams}}{{#formParams}}{{#required}}validateRequiredParameter("{{paramName}}", {{paramName}}, "form data");{{/required}}{{/formParams}}

            {{>returnTypes}} result = {{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});

            if (result == null) {
                return ResponseEntity.noContent().build();
            }

            {{^async}}return ResponseEntity.ok(result);{{/async}}
        } catch (NAASPException exception) {
            return ResponseEntity.status(exception.getHttpStatusCode()).body(exception);
        }
    }

    public abstract {{>returnTypes}} {{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
        {{/hasMore}}{{/allParams}}) throws NAASPException;
    {{/operation}}{{/jdk8-no-delegate}}

    /**
    * Validates a required parameter.
    */
    protected void validateRequiredParameter(String paramName, Object paramValue, String requiredIn) throws BadRequestException {
        if (paramValue == null) {
            throw new BadRequestException("This request requires a " + paramName +
                " to be provided with the " + requiredIn + ".");
        }
    }
}
{{/operations}}